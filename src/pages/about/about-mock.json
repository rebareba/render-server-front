{
	"markdown": {
		"success": {
			"success": true,
			"code": 0,
			"content": "\n## 简介\n\nRender-Server 作为中间件服务，根据路由的匹配配置来渲染对应的前端入口页面和接口代理转发，结合相应的插件可以实现后端服务的对接、数据mock、登录验证等功能\n\n\n\n**功能列表**\n\n- 一键部署 npm run deploy\n- 支持集群部署配置\n- 是一个文件服务\n- 是一个静态资源服务\n- 在线可视化部署前端项目\n- 配置热更新\n- 在线Postman及接口文档\n- 支持前端路由渲染， 支持模板\n- 接口代理及路径替换\n- Web安全支持 Ajax请求验证，Referer 校验\n- 支持插件开发和在线配置 可实现： 前端模板参数注入、请求头注入、IP白名单、接口mock、会话、第三方登陆等等\n\n\n## 部署说明\n\n\n### 一键部署（推荐）\n\n第一次部署可以选择该方式部署，\n\n拷贝压缩包`render-server_x.x.x.tgz`到`/opt/workspace/`目录下：\n解压后 进入项目 执行`npm run deploy` 进行一键部署会按推荐方式创建部署的相关目录和配置文件， 并启动服务：\n\n\n```\n[deploy workspace]$ tar -zxvf  render-server_x.x.x.tgz\n...\n[deploy workspace]$ cd  render-server\n[deploy@ render-server] $ npm run deploy\n...\n[deploy@ render-server] $ pm2 ls\n┌────────────────┬────┬─────────┬─────────┬───────┬────────┬─────────┬────────┬──────┬────────────┬────────┬──────────┐\n│ App name       │ id │ version │ mode    │ pid   │ status │ restart │ uptime │ cpu  │ mem        │ user   │ watching │\n├────────────────┼────┼─────────┼─────────┼───────┼────────┼─────────┼────────┼──────┼────────────┼────────┼──────────┤\n│ render-server  │ 32 │ 2.0.0   │ cluster │ 29359 │ online │ 0       │ 43h    │ 0.3% │ 56.0 MB    │ deploy │ disabled │\n│ render-server  │ 33 │ 2.0.0   │ cluster │ 29366 │ online │ 0       │ 43h    │ 0.2% │ 50.4 MB    │ deploy │ disabled │\n└────────────────┴────┴─────────┴─────────┴───────┴────────┴─────────┴────────┴──────┴────────────┴────────┴──────────┘\n\n```\n\n部署成功 默认端口8888\n\n### 手动部署\n\n\n使用推荐的部署方式，和部署相关的项目代码下的文件和目录\n\n- `config/config_prd.js` 推荐的配置文件拷贝到外部配置文件`/opt/conf/render-server/config.js`\n- `data/*` 页面代理和接口渲染服务的配置存放目录\n- `static/*` 打包静态文件和模板的存放目录\n- `pm2.json` 服务启动配置文件 `pm2 start pm2.json` 可以修改部配置文件地址\n- `bin/echo_config.js` 查看配置文件正确与否。执行`node echo_config.js`\n- `bin/generate_password.js` 生成账号的密码 执行`node generate_password.js [password] [salt]`\n\n相关目录：\n\n- 创建`/data/render-server/data` 目录 并拷贝项目下的`data`目录内容到这里\n- 创建`/data/render-server/logs` 目录 \n- 创建`/data/render-server/static` 目录并拷贝项目下的`static`目录内容到这里, 后面静态文件都放这里\n\n修改配置`/opt/conf/render-server/config.js` 中端口号等后进入项目执行\n\n```\n[deploy@ workspace]$ cd render-server\n[deploy@ render-server]$ pm2 start pm2.json\n```\n\n### 配置文件说明\n\n```js\n'use strict';\n/* eslint-disable */\n\nmodule.exports = {\n  debug: false, // 是否打印日志到日志文件中\n  projectName: 'render-server',\n  env: 'prd',\n  port: 8888, // 服务的端口\n  renderConfigPath: '/data/render-server/data', //面代理和接口渲染服务的配置存放目录 上面新建的对应\n  staticOption: {\n    rootPath: '/data/render-server/static', //打包静态文件的存放目录 上面新建的对应\n    options: {\n      maxage: 7 * 24 * 3600 * 1000,            //  Browser cache max-age in milliseconds. defaults to 0\n      hidden: false,        //  Allow transfer of hidden files. defaults to false\n      index: false,         //  Default file name, defaults to 'index.html'\n      //  defer: false,     //   当前场景要先处理false If true, serves after return next(), allowing any downstream middleware to respond first.\n      gzip: true,            //  Try to serve the gzipped version of a file automatically when gzip is supported by a client and if the requested file with .gz extension exists. defaults to true.\n      br: true,             //  Try to serve the brotli version of a file automatically when brotli is supported by a client and if the requested file with .br extension exists (note, that brotli is only accepted over https). defaults to true.\n      // setHeaders,        //  Function to set custom headers on response.\n      // extensions: false,  //Try to match extensions from passed array to search for file when no extension is sufficed in URL. First found is served. (defaults to false)\n    },\n  },\n  logger: {\n    prd: {\n      name: 'all',\n      level: 'debug', //debug info warn error\n      dirname: '/data/render-server/logs/', //日志存放目录 上面新建的对应\n      maxFiles: '60d',\n      // zippedArchive: true,\n      // maxSize: '20m',\n    },\n  },\n  // 视图的相关设置\n  viewOption: {\n    viewPath: '/data/render-server/static', //页面模板的目录 上面新建的对应\n    options: {\n      extension: 'ejs',\n      map: {html: 'ejs' }\n    },\n  },\n  // 通知自己服务订正数据 部署了几台机器就配置几台 支持高可用\n  notifyHosts: ['http://127.0.0.1:8888'], // 更新配置的通知服务地址， 部署几台机器都有添加上，注意端口和上面对应\n  // 会话相关配置，存在cookie中 加密\n  sessionOptions: {\n    sessionId: 'SESSION-RENDER-SERVER',\n    maxAge: 86400 * 1000,\n    path: '/',\n    domain: '',\n    overwrite: true,\n    httpOnly: true,\n    rolling: true,\n  },\n  // 默认的管理员账号 admin 密码123456\n  accounts: [\n    {\n      name: 'admin', // 登录账号\n      password: '0218fcb2204b59d9b89fcde783e4981a', //加盐密码 123456 密码盐 changfeng\n      nickname: '超级管理员',\n      // salt: 'changfeng', // 密码盐 默认chanfeng\n      permission: 15, // + 1 查看 + 2 新建 + 4 编辑 + 8 删除  默认权限 &2才有新建配置项权限\n      //如果不存在apps: {} 则说明有全部权限 // 指定配置的权限 如 {gateway: 5} 则对配置key为gateway 的有查看编辑权限\n    },\n  ],\n  // 自带接口的白名单设置 参考npm包 ip-range-check\n  whiteIps: ['0/0'],\n  // 自带接口的ajax 请求的referer规则校验 path-to-regexp包判断\n  referers: [],\n  // 下面 cookie的aes-cdc的加密密钥及内容通知接口签名密钥\n  aesKey: 'b7133978e6eb1a9efc3aae86b5b3a10f', // md5('changfeng')\n};\n\n```\n\n\n### 添加账号\n\n往配置项`accounts`添加， 如添加所有的只读账号 `read` 密码 `read`\n\n`node bin/generate_password.js [password] [salt]`\n\n```ssh\n$ node bin/generate_password.js read \ninput password: read |input salt: undefined\nif salt undefined will use default salt:changfeng\nacbddb0fd4b177b0fcd60709d20a8606\n\n```\n\n添加\n\n```js\n{\n  accounts: [\n    {\n      name: 'read', // 登录账号\n      password: 'acbddb0fd4b177b0fcd60709d20a8606', //加盐密码 123456 密码盐 changfeng\n      nickname: '只读账号',\n      permission: 1, // + 1 查看 + 2 新建 + 4 编辑 + 8 删除  默认权限 &2才有新建配置项权限\n    },\n  ]\n}\n```\n\n添加空白账号 `test` 密码 `read`\n\n```js\n{\n  accounts: [\n    {\n      name: 'test', // 登录账号\n      password: 'acbddb0fd4b177b0fcd60709d20a8606', //加盐密码 123456 密码盐 changfeng\n      nickname: '测试',\n      permission: 3, // + 1 查看 + 2 新建 + 4 编辑 + 8 删除  默认权限 &2才有新建配置项权限\n      apps: {}\n    },\n  ]\n}\n```\n\n\n### 修改默认配置文件路径和进实例数\n\n修改 `pm2.json` 的`CONFIG_PATH`配置项，指定配置文件的绝对路径\n\n修改 `instances`配置项 为目标数，默认0为和cup的核心数一致\n\n```json\n{\n  \"apps\": [\n    {\n      \"name\": \"render-server\",\n      \"script\": \"app.js\",\n      \"instances\": 0,\n      \"exec_mode\": \"cluster\",\n      \"env\": {\n        \"NODE_ENV\": \"production\",\n        \"CONFIG_PATH\":\"\"\n      }\n    }\n  ]\n}\n\n```\n\n\n### 管理平台IP白名单配置\n\n配置项 `whiteIps` 的配置 参考 [ip-range-check](https://github.com/danielcompton/ip-range-check#readme)\n\n\n\n## 使用示例\n\nhttp://127.0.0.1:8888/render-server/home\n账号: admin\n密码：123456\n\n假设当前有一个前端项目`admin-front` 使用`webpack`进行打包， 设置的打包的`publicPath` 为 `/admin-front/1.1.0/`\n\n打包出来的文件列表如下：\n\n```\nadmin-front\n└── 1.1.0\n    ├── 0.css\n    ├── assets\n    ├── index.css\n    ├── index.html\n    ├── index.js\n    └── vendor.js\n```\n\n**admin-front/1.1.0/index.html**内容如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Render-Server</title>\n<link href=\"/admin-front/1.1.0/0.css\" rel=\"stylesheet\"><link href=\"/admin-front/1.1.0/index.css\" rel=\"stylesheet\"></head>\n<script>\n</script>\n<script type=\"text/javascript\">\n    var appData = <%- JSON.stringify(appData) %>\n</script>\n<body>\n<div id=\"root\" style=\"width: 100%; height: 100%;\"></div>\n<script type=\"text/javascript\" src=\"/admin-front/1.1.0/vendor.js\"></script><script type=\"text/javascript\" src=\"/admin-front/1.1.0/index.js\"></script></body>\n</html>\n\n```\n\n拷贝index.html 到`admin-front`目录下作为模板\n\n```\nadmin-front\n└── 1.1.0\n    ├── 0.css\n    ├── assets\n    ├── index.css\n    ├── index.html\n    ├── index.js\n    └── vendor.js\n    index.html\n```\n\n### 第一步 拷贝打包文件到服务器\n\n\n将前端项目打包出来文件拷贝到服务器的该目录下：\n\n```\n$scp -r dist/admin-front deploy@127.0.0.1:/data/render-server/static\n```\n\n登陆服务器查看\n\n```ssh\n[deploy@nodejs 1.1.0]$ pwd\n/data/render-server/static/admin-front\n[deploy@nodejs 1.1.0]$ ls \nindex.html 1.1.0\n[deploy@nodejs ]$ ls\n0.css  assets  index.css  index.html  index.js  vendor.js\n```\n\n模板文件`/data/render-server/static/admin-front/index.html` 和服务设置的静态路径 `/data/render-server/static` 的相对路径是`admin-front/index.html` ，这个值在第二步配置`viewPath`使用到\n\n### 第二步 在线配置服务\n\n访问http://127.0.0.1:8888/render-server/home\n\n登录后 右上角有按钮，新建一个服务配置项目， 配置内容如下\n\n```json\n{\n    \"key\": \"admin-front\",\n    \"name\": \"管理后台前端\",\n    \"description\": \"描述\",\n    \"viewRender\": [\n        {\n            \"paths\": [\n                \"/admin-front/(.*)\",\n                \"/admin-front\"\n            ],\n            \"hosts\": [],\n            \"plugins\": [],\n            \"defaultData\": {},\n            \"viewType\": \"path\",\n            \"viewPath\": \"admin-front/index.html\",\n            \"viewData\": \"\"\n        }\n    ],\n    \"apiProxy\": [\n        {\n            \"methods\": [],\n            \"paths\": [\n                \"/admin-front/api/(.*)\"\n            ],\n            \"backHost\": \"http://127.0.0.1:80\"\n        }\n    ]\n}\n\n```\n\n\n\n保存配置 访问 `http://127.0.0.1:8888/admin-front` 就能看到渲染的前端页面\n\n`apiProxy` 配置所有`/admin-front/api` 前缀的ajax请求都能代理到后端的 `http://127.0.0.1:80`这个服务。\n\n### 第三步 代码更新和回滚\n\n- scp 上传最新版本的文件和模板文件\n- 回滚：拷贝服务器对应版本号下的`index.html`文件 替换模板`admin-front/index.html`\n\n## 配置说明\n\n### 示例\n\n```json\n{\n\t\"key\": \"app\",\n\t\"account\": \"admin\",\n\t\"name\": \"应用服务\",\n\t\"pageIndex\": \"/app\",\n\t\"description\": \"描述\",\n\t\"viewRender\": [\n\t\t{\n\t\t\t\"paths\": [\n\t\t\t\t\"/app/(.*)\",\n\t\t\t\t\"/app\"\n\t\t\t],\n\t\t\t\"hosts\": [\n\t\t\t\t\"www.baidu.com\"\n\t\t\t],\n\t\t\t\"plugins\": [],\n\t\t\t\"defaultData\": {},\n\t\t\t\"viewType\": \"path\",\n\t\t\t\"viewPath\": \"app/index\",\n\t\t\t\"viewData\": \"直接是html的内容\"\n\t\t}\n\t],\n\t\"apiProxy\": [\n\t\t{\n\t\t\t\"methods\": [],\n\t\t\t\"paths\": [\n\t\t\t\t\"/app/(.*)\",\n\t\t\t\t\"/app\"\n\t\t\t],\n\t\t\t\"allRequest\": false,\n\t\t\t\"referers\": [],\n\t\t\t\"pathPrefix\": \"/app\",\n\t\t\t\"prefixPath\": \"\",\n\t\t\t\"plugins\": [\n\t\t\t\t{\n\t\t\t\t\t\"key\": \"test\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"tenantId\": 1,\n\t\t\t\t\t\t\"productId\": 7,\n\t\t\t\t\t\t\"userId\": 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"headerMap\": {\n\t\t\t\t\"tenantId\": \"X-Access-TenantId\",\n\t\t\t\t\"productId\": \"X-Access-ProductId\"\n\t\t\t},\n\t\t\t\"defaultData\": {},\n\t\t\t\"backHost\": \"http://127.0.0.1:9017\"\n\t\t}\n\t],\n\t\"staticPrefix\": [\n\t\t\"/app/static/platform\"\n\t]\n}\n```\n\n\n### 配置项\n\n`*` 标识为必填项\n\n\n#### key*\n\n`key` 值对应配置项的标识，对应配置项存储目录`/data/render-server/data` 下的`key.json`文件， 一旦设置无法修改，只能删除。 如`gateway`会有对应的`gateway.json`文件\n\n\n#### account \n\n对应添加配置项的登录用户，无法修改和删除。新建的时候自动添加， 该账户对该配置有所有权限。\n\n#### pageIndex\n\n首页地址，仅为管理界面跳转使用\n\n\n#### name*\n\n配置的应用的名称\n\n#### description*\n\n配置的应用的功能描述\n\n#### viewRender[]\n\n路径匹配页面渲染，ajax请求时候请求头有`x-requested-with` 为`XMLHttpRequest` 不匹配, 且只匹配`GET`请求， 多个应用的配置可能会有互相干扰 注意路径分配。\n\n##### viewRender[].paths[] *\n\n使用 [path-to-regexp](https://github.com/pillarjs/path-to-regexp#readme)这个npm包来校验请求路径。\n\n`[\"/app-gateway/(.*)\"]` 匹配请求路径`ctx.path` 为`/app-gateway/`前缀的所有路径\n\n\n##### viewRender[].hosts[]\n\n非必须，空数组忽略\n使用 [path-to-regexp](https://github.com/pillarjs/path-to-regexp#readme)来校验,支持多个正则匹配，结合paths的规则一起匹配， 并校验请求头的`host`值。\n\n##### viewRender[].plugins[]\n\n路径渲染前的插件列表 可以做一些登录判断，重定向等。\n\n##### viewRender[].defaultData\n\n这里的数据作为`ejs` 模板引擎的默认数据，可以使用插件覆盖数据， 插件往`ctx.renderData`赋值\n\n##### viewRender[].viewType*\n\n`path` 和 `data`两个值，默认`data` 对应下面的`viewData`数据，`path`对应`viewPath`路径\n\n##### viewRender[].viewPath*\n\n指定模板路径`/data/render-server/view`下的模板路径的相对地址\n\n##### viewRender[].viewData*\n\n模板的转义字符串值，和文件模板效果一致\n\n```js\nlet ejsHtml = `esj模板的html的数据`\n\nconsole.log(JSON.stringify(ejsHtml));\n// 打印内容\n\n```\n\n#### apiProxy[]\n\nAPI接口的代理配置，默认对ajax请求的代理，可配置多个代理配置，**多个应用的配置可能会有互相干扰**，需要合理分类路由，或设置不同的referers\n\n##### apiProxy[].methods[]\n\n非必须 空数组为全部方法。支持：'GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'\n\n##### apiProxy[].paths[]\n\n使用 [path-to-regexp](https://github.com/pillarjs/path-to-regexp#readme)这个npm包来校验请求路径,支持多个正则匹配 ， 匹配请求的路由\n\n##### apiProxy[].allRequest\n\nBoolean 默认false， 是否判断请求头 `x-requested-with` 为`XMLHttpRequest` ， true 则不判断\n\n##### apiProxy[].referers[]\n\n请求头的header的referer判断，使用 [path-to-regexp](https://github.com/pillarjs/path-to-regexp#readme)这个npm包来校验，一般`CSRF跨站点请求伪造`攻击的安全措施\n\n##### apiProxy[].pathPrefix\n\n非必须 统一路径前缀剔除, 比如值为`/app-gateway`， 接口请求地址为 `/app-gateway/api/login` 则到后端接口请求的地址为`/api/login`\n\n##### apiProxy[].prefixPath\n\n非必须，统一后端请求路径前缀添加, 比如`pathPrefix`值为`/app-gateway`，`prefixPath`为`/api/gateway/v1` 当页面接口请求地址为 `/app-gateway/api/login` 则后端接口请求的地址为`/api/gateway/v1/api/login`\n\n##### apiProxy[].plugins[]\n\n非必须插件可以支持多个插件，按顺序执行， 具体使用可以参考下面插件开发说明。 一般有数据mock, 请求头注入设置，登录校验，会话处理等，请求白名单。\n\n##### apiProxy[].headerMap{}\n\n非必须， 对请求头的注入，会先剔除改请求头， 如请求头对应的key的值有就注入到请求头中，插件往`ctx.proxyData`赋值作为key的值\n比如headerMap\n\n\n```json\n{\n  \"tenantId\": \"X-Access-TenantId\",\n  \"productId\": \"X-Access-ProductId\"\n}\n```\n\n```js\nctx.proxyData = {\n  tenantId: 1\n}\n// 最终到后端的请求头只有：\nreq.headers['X-Access-TenantId'] = 1\n```\n\n##### apiProxy[].defaultData[]\n\n非必须作为 `ctx.proxyData`的默认值\n\n##### apiProxy[].backHost*\n\n后端服务的接口地址如`http://127.0.0.1:9017` 不支持负载均衡，后端服务自己实现高可用地址透出。\n\n\n#### staticPrefix[]\n\n一般情况可以忽略这个配置项。\n静态文件的前缀剔除后再次寻找本地静态文件比如配置 `[\"/prefix/app\"]`，静态文件请求地址为`/prefix/app/gateway/a.css` 则会先寻找配置的静态文件目录下的相对地址`prefix/app/gateway/a.css` 寻找文件，寻找不到再去`gateway/a.css`相对路径下寻找\n。\n\n## 插件开发\n\n### 说明\n\n插件代码存放在项目的 `plugin/` 目录下， 插件的key 就是文件名，比如`plugin/test.js` 的`key`就是`test`. 插件接收一个参数，必须有返回值`true`或`false`；\n\n插件不区分是页面渲染使用还是接口代理使用，需用户自己判断添加，具体插件列表参考**插件**页说明；\n\n返回值说明:\n\n- true 返回true的时候，程序会继续往下走，会走到下一个插件，或页面渲染、或接口代理， 一般这个插件不会给`ctx.body` 赋值。一般给`ctx.proxyData`或`ctx.renderData`赋值\n- false 一般插件这时候已经完成的请求处理，对请求返回内容已经做出响应。比如登录、登录验证失败，重定向等。\n\n比如下面的`plugin/test.js`如下：\n\n```js\n'use strict';\n\nconst log = require('../common/log');\n\nmodule.exports = (options) => {\n  return async (ctx) => {\n    log.debug('plugin test options', options);\n    // 这个是接口代理数据\n    ctx.proxyData = options;\n    // 这个是模板注入数据\n    ctx.renderData = options;\n    return true;\n  };\n};\n```\n\n插件开发完成后放到 `plugin`目录下重启服务，并在接口代理或者页面渲染代理配置上插件即可使用：\n\n```json\n{\n  \"plugins\": [\n    {\n      \"key\": \"test\",\n      \"options\": {\n        \"tenantId\": 1,\n        \"productId\": 7,\n        \"userId\": 1\n      }\n    }\n  ]\n}\n```\n\n## TODO LIST\n\n- 在线静态文件上传 (使用文件共享服务如：nfs、oss对接)\n- 在线插件版本更新\n- 集成应用网关（在线接口文档测试）\n- Docker化\n\n\n## CHANGELOG",
			"message": ""
		}
	}
}